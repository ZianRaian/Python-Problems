Usernames Change

A company has released a new internal system, and each employee has been assigned a username. Employees are allowed to change their usernames but only in a limited way. More specifically, the can choose letters at two different positions and swap them. For example, the username 'bigfish' can be changed to 'gibfish' The manager would like to know which employees can update their usernames so that the new username is smaller in alphabetical order than the original username.

For each username, given return either 'YES' or 'NO' based on whether that username can be changed(with one swap) to a new order that is smaller in alphabetical order than B has.

Note: For two different strings A and B of the same length, A is smaller than B in alphabetical order when on the first position where A and B differ, A has a smaller letter in alphabetical order than B has.

For example, let's say usernames= [ "bee" , "superhero", "ace"] . For the first username, "bee", it is not possible to make one swap to change it to a smaller one in alphabetical order, so the answer is "NO". For the second username, "superhero", it is possible to get a new username that is smaller in alphabetical order( for example, by swapping letters "s" and "h" to get "hupersuper"), so answer is "YES". For the last username "ace" , not possible to make change so therefore the the return of the strings would be ["NO", "YES", "NO]
Function description:
Complete the function possibleChanges.
possibleChanges has the following parameters:
    string usenames[n]: an array of strings denoting the usernames of the employees.
Returns:
    string[n]: an array of strings containing either 'YES' or 'NO' based on whether the ith username can be changed with one swap to a new one that is smaller in alphabetical order.

Constraints:
1) 1 <= n <= 10^5
2) The sum of lengths of all usernames does not exceed 10^6.
3) usernames[i] consists of only lowercase English letters.

Input format:
The first line of input contains an integer , n, denoting the number of employees.
Each line i of the n subsequent lines ( where 0 <= i <n) contains a string, usernames[i], denoting the username of the ith employee.


########## Solution Approach ###########

1)Observing the pattern:

    If there exists a later character in the username that is smaller than an earlier character, then a swap can produce a smaller username.
    If the username is already sorted in non-decreasing order, no swap can make it smaller.

2)Efficient Algorithm:

    We scan from left to right while keeping track of the smallest character encountered so far from the right.
    If we find a character on the left that is greater than a later character on the right, return "YES".
    Otherwise, return "NO".

3)Complexity:

    The approach runs in O(L) per username, where L is the length of the username.
    Since the total sum of all usernames' lengths is at most 106106, this approach is efficient.
